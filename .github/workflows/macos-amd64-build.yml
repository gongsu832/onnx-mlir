name: GitHub Action MacOS amd64

on: [push, pull_request]

jobs:
  build:
    runs-on: macos-latest
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: recursive
    - uses: actions/setup-python@v4
      with:
        id: cp310
        python-version: '3.10'
    - name: install tools that are needed for compilation
      run: |
        brew install automake ninja pybind11
        echo PATH=${{ steps.cp310.outputs.python-path }}:$PATH >>$GITHUB_ENV
    - name: install protobuf
      run: |
        cd ~/work
        sh ~/work/onnx-mlir/onnx-mlir/utils/install-protobuf.sh
    - name: cache MLIR directory
      id: cache-mlir
      uses: actions/cache@v2
      env:
        cache-name: cache-mlir-directory
      with:
        path: ~/work/onnx-mlir/llvm-project
        key: V8-${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/clone-mlir.sh', '**/build-mlir.sh') }}
    - name: clone & build MLIR
      if: steps.cache-mlir.outputs.cache-hit != 'true'
      run: |
        cd ~/work/onnx-mlir
        sh ~/work/onnx-mlir/onnx-mlir/utils/clone-mlir.sh
        sh ~/work/onnx-mlir/onnx-mlir/utils/build-mlir.sh
    - name: install third_party/onnx
      run: |
        echo $PATH
        cd ~/work/onnx-mlir/onnx-mlir/third_party/onnx
        git fetch --prune --unshallow --tags
        python3 -m pip install -v .
    - name: build onnx-mlir
      run: |
        echo $PATH
        cd ~/work/onnx-mlir
        sh ~/work/onnx-mlir/onnx-mlir/utils/install-onnx-mlir.sh
    - name: run onnx-mlir backend and numerical tests
      run: |
        echo $PATH
        cd ~/work/onnx-mlir
        sh ~/work/onnx-mlir/onnx-mlir/utils/check-onnx-backend-numerical.sh
